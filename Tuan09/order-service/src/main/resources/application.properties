spring.application.name=order-service

server.port=8082

spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=orderTuan09;encrypt=true;trustServerCertificate=true;


spring.datasource.username=sa
spring.datasource.password=031103


spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.type=trace
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

spring.web.resources.static-locations=classpath:/static/
product-service.url= http://localhost:8080


# Định nghĩa một instance Circuit Breaker có tên là productService
#Đăng ký một health indicator cho Circuit Breaker này, cho phép bạn theo dõi trạng thái của nó thông qua Spring Boot Actuator.
resilience4j.circuitbreaker.instances.productService.registerHealthIndicator=true
#: Kích thước của cửa sổ trượt được sử dụng để tính toán tỷ lệ lỗi. Trong ví dụ này, 10 cuộc gọi gần nhất sẽ được xem xét.
resilience4j.circuitbreaker.instances.productService.slidingWindowSize=10
#Số lượng cuộc gọi tối thiểu cần thiết trong cửa sổ trượt trước khi Circuit Breaker có thể chuyển sang trạng thái open.
resilience4j.circuitbreaker.instances.productService.minimumNumberOfCalls=5
#Tỷ lệ lỗi (phần trăm) vượt quá ngưỡng này sẽ khiến Circuit Breaker chuyển sang trạng thái open.
resilience4j.circuitbreaker.instances.productService.failureRateThreshold=50
#Tỷ lệ lỗi (phần trăm) vượt quá ngưỡng này sẽ khiến Circuit Breaker chuyển sang trạng thái open.
resilience4j.circuitbreaker.instances.productService.slowCallRateThreshold=100
#Tỷ lệ các cuộc gọi chậm (vượt quá 2s) vượt quá ngưỡng này sẽ khiến Circuit Breaker chuyển sang trạng thái open.
resilience4j.circuitbreaker.instances.productService.slowCallDurationThreshold=2s
#Số lượng cuộc gọi cho phép khi Circuit Breaker ở trạng thái half-open để kiểm tra xem dịch vụ đã khôi phục chưa.
resilience4j.circuitbreaker.instances.productService.permittedNumberOfCallsInHalfOpenState=3
#Thời gian Circuit Breaker sẽ duy trì ở trạng thái open trước khi chuyển sang trạng thái half-open.
resilience4j.circuitbreaker.instances.productService.waitDurationInOpenState=10s
#Các loại exception được coi là lỗi và sẽ được tính vào tỷ lệ lỗi.
resilience4j.circuitbreaker.instances.productService.recordExceptions=java.io.IOException, org.springframework.web.client.HttpServerErrorException, org.springframework.web.client.ResourceAccessException
Các loại exception bị bỏ qua và không được tính vào tỷ lệ lỗi.
resilience4j.circuitbreaker.instances.productService.ignoreExceptions=org.springframework.dao.DataAccessException

# Cấu hình mặc định cho tất cả các Circuit Breaker (nếu bạn muốn)
resilience4j.circuitbreaker.configs.default.slidingWindowSize=100
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=60s
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=10
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls=10
resilience4j.circuitbreaker.configs.default.recordExceptions=java.lang.Throwable



resilience4j.retry.instances.productService.maxAttempts=5
resilience4j.retry.instances.productService.waitDuration=1s
resilience4j.retry.instances.productService.multiplier=2
resilience4j.retry.instances.productService.retryOnResultPredicate.bean.name=retryOnServerError
resilience4j.retry.instances.productService.retryOnExceptionPredicate.bean.name=retryOnIOException
resilience4j.retry.instances.productService.failAfterMaxAttempts=true

# Cấu hình mặc định cho tất cả các Retry (nếu bạn muốn)
resilience4j.retry.configs.default.maxAttempts=3
resilience4j.retry.configs.default.waitDuration=500ms
resilience4j.retry.configs.default.retryOnExceptionPredicate.bean.name=retryOnAnyException

#resilience4j.retry.instances.productService: Định nghĩa một instance Retry có tên là productService.
#maxAttempts: Số lần thử lại tối đa.
#waitDuration: Thời gian chờ ban đầu giữa các lần thử lại.
#multiplier: Hệ số nhân cho thời gian chờ giữa các lần thử lại (exponential backoff).
#retryOnResultPredicate.bean.name: Tên của một Spring Bean implement Predicate<RetryContext> để xác định xem có nên thử lại dựa trên kết quả trả về hay không.
#retryOnExceptionPredicate.bean.name: Tên của một Spring Bean implement Predicate<Throwable> để xác định xem có nên thử lại dựa trên exception hay không.
#failAfterMaxAttempts: Nếu true, exception cuối cùng sẽ được ném ra sau khi đạt đến số lần thử lại tối đa.


resilience4j.ratelimiter.instances.getProductApi.limitForPeriod=10
resilience4j.ratelimiter.instances.getProductApi.limitRefreshPeriod=1m
resilience4j.ratelimiter.instances.getProductApi.timeoutDuration=500ms

# Cấu hình mặc định cho tất cả các Rate Limiter (nếu bạn muốn)
resilience4j.ratelimiter.configs.default.limitForPeriod=100
resilience4j.ratelimiter.configs.default.limitRefreshPeriod=1m
resilience4j.ratelimiter.configs.default.timeoutDuration=1s